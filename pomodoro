#!/usr/bin/python
import os
from os.path import join
import argparse
import datetime

from pomodoro_config import *
import t

def build_parser():
    parser = argparse.ArgumentParser(description="Control the pomodoro.")
    parser.add_argument("task",
                        nargs="?",
                        help="task to start the pomodoro for", metavar="TASK")
    parser.add_argument("--done",
                        default=False, action="store_true",
                        help="mark the current pomodoro as completed")
    parser.add_argument("--resume",
                        default=False, action="store_true",
                        help="start another pomodoro with the previous task")
    parser.add_argument("--stop",
                        default=False, action="store_true",
                        help="stop the pomodoro")
    return parser

if __name__ == "__main__":
    args = build_parser().parse_args()

    today = datetime.date.today()
    filename = "{}-{}".format(SCHEDULE_FILE_PREFIX, str(today))

    todo = t.TaskDict(TASK_DIR, filename)
    inventory = t.TaskDict(TASK_DIR, INVENTORY_FILE)

    if args.task:
        if len(todo.tasks) == 0:
            print("There are no tasks scheduled for today!")
            exit(0)

        task_id = todo[args.task]['id']
        with open(join(TASK_DIR, CURRENT_TASK_FILE), 'w') as f:
            f.write(task_id)
        with open(join(SESSION_DIR, SESSION_FILE), 'w'):
            pass
    elif args.done:
        try:
            with open(join(TASK_DIR, CURRENT_TASK_FILE), 'r') as f:
                current_task_id = f.read()
                task = todo[current_task_id]
                task['marks'] = str(int(task.get('marks', 0)) + 1)
                todo.tasks[current_task_id] = task
                inventory.tasks[current_task_id] = task
                todo.write()
                inventory.write()
        except IOError as e:
            print("No task was previously started.")
    elif args.resume:
        try:
            with open(TASK_DIR + CURRENT_TASK_FILE, 'r'):
                with open(SESSION_DIR + SESSION_FILE, 'w'):
                    pass
        except IOError as e:
            print("A pomodoro is not currently in progress.")
    elif args.stop:
        os.remove(join(SESSION_DIR, SESSION_FILE))
    else:
        try:
            with open(join(TASK_DIR, CURRENT_TASK_FILE), 'r') as f:
                current_task_id = f.read()
                task = todo[current_task_id]
                print(task['text'], task['id']) 
                print("Marks: {}".format('X' * int(task.get('marks', 0))))
                print("Internal: {}".format('\'' * int(task.get('internal', 0))))
                print("External: {}".format('-' * int(task.get('external', 0))))
        except IOError as e:
            print("A pomodoro is not currently in progress.")

