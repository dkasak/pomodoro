#!/usr/bin/python

# Recreates the t task file whose filename is passed as the first command line argument.
# This recalculates all the hashes so each task entry has the proper hash, even if it was 
# previously edited.
# The script will create a new file (with the extension .new) in the current directory
# instead of overwriting the old one.

import subprocess
import sys
import os

home = os.path.expanduser("~")
sys.path.append(home + os.sep + "bin")
import t

if len(sys.argv) != 2:
    print("Usage: {} TASK_FILE".format(sys.argv[0]))
    exit(1)

old = t.TaskDict(os.getcwd(), sys.argv[1])
new = t.TaskDict(os.getcwd(), sys.argv[1] + ".new")
for task in old.tasks.values():
    task['id'] = t._hash(task['text'])
    new.tasks[task['id']] = task
new.write()

# ensure that the files contain the same number of lines
check = subprocess.check_output
lines1, filename = check(['wc', '-l', sys.argv[1]]).split()
lines2, filename = check(['wc', '-l', sys.argv[1] + '.new']).split()

assert lines1 == lines2  

