#!/usr/bin/python
import argparse
import datetime
import os
import subprocess
from libpomodoro import StoreBoth, t

TASK_DIR = os.path.expanduser("~/docs/tasks/")
INVENTORY_FILE = "tasks"

def build_parser():
    parser = argparse.ArgumentParser(description="Schedule task(s) for today from the activity inventory.")
    parser.add_argument("tasks",
                        nargs="*",
                        help="tasks to schedule for today", metavar="TASK")
    parser.add_argument("-r", "--remove",
                        nargs=1, dest="remove", action=StoreBoth,
                        help="remove TASK from the todo list", metavar="TASK")
    parser.add_argument("-g", "--grep",
                        nargs=1, dest="grep", action=StoreBoth,
                        default="",
                        help="print only tasks that contain WORD", metavar="WORD")
    parser.add_argument("-v", "--verbose",
                        dest="verbosity", action="store_const",
                        default="", const="--verbose",
                        help="print more detailed output")
    parser.add_argument("-q", "--quiet",
                        dest="verbosity", action="store_const",
                        default="", const="--quiet",
                        help="print less detailed output")
    return parser

if __name__ == "__main__":
    args = build_parser().parse_args()

    today = datetime.date.today()
    filename = "todo-{}".format(str(today))
    path = os.path.expanduser(TASK_DIR + filename)

    if not os.path.exists(path):
        with open(path, "w"):
            pass

    if args.remove:
        t(TASK_DIR, filename, *args.remove)
    elif args.tasks:
        output = t(TASK_DIR, INVENTORY_FILE, verbose=True)
        for task in output.split('\n'):
            parts = task.partition('-')
            id, text = parts[0].strip(), parts[2].strip()
            if True in map(id.startswith, args.tasks):
                t(TASK_DIR, filename, text)
    else:
        output = t(TASK_DIR, filename, args.verbosity, *args.grep)
        print(output, end="")

