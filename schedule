#!/usr/bin/python
import argparse
import datetime
import os
import sys

home = os.path.expanduser("~")
sys.path.append(home + os.sep + "bin")
import t

def build_parser():
    parser = argparse.ArgumentParser(description="Schedule task(s) for today from the activity inventory.")
    parser.add_argument("tasks",
                        nargs="*",
                        help="tasks to schedule for today", metavar="TASK")
    parser.add_argument("-r", "--remove",
                        nargs=1, dest="remove", action="store",
                        help="remove TASK from the todo list", metavar="TASK")
    parser.add_argument("-g", "--grep",
                        nargs=1, dest="grep", action="store",
                        default="",
                        help="print only tasks that contain WORD", metavar="WORD")
    parser.add_argument("-v", "--verbose",
                        dest="verbose", action="store_true",
                        default=False,
                        help="print more detailed output")
    parser.add_argument("-q", "--quiet",
                        dest="quiet", action="store_true",
                        default=False,
                        help="print less detailed output")
    return parser

if __name__ == "__main__":
    TASK_DIR = os.path.expanduser("~/docs/tasks/")
    INVENTORY_FILE = "tasks"
    args = build_parser().parse_args()

    today = datetime.date.today()
    filename = "todo-{}".format(str(today))
    path = os.path.expanduser(TASK_DIR + filename)

    inventory = t.TaskDict(TASK_DIR, INVENTORY_FILE)
    todo = t.TaskDict(TASK_DIR, filename)

    if args.grep:
        args.grep = args.grep[0]

    # create the todo list if it doesn't exist
    if not os.path.exists(path):
        with open(path, "w"):
            pass

    if args.remove:
        try:
            task_id = args.remove[0]
            todo.remove_task(task_id)
            todo.write()
        except t.AmbiguousPrefix as e:
            print("Skipping '{}', ambiguous prefix in todo list.".format(e.prefix))
        except t.UnknownPrefix as e:
            print("Skipping '{}', no such task in todo list.".format(e.prefix))
    elif args.tasks:
        for id in args.tasks:
            try:
                task = inventory[id]
                full_id = task['id']
                todo[full_id] = task
            except t.AmbiguousPrefix as e:
                print("Skipping '{}', ambiguous prefix in inventory.".format(e.prefix))
            except t.UnknownPrefix as e:
                print("Skipping '{}', no such task in inventory.".format(e.prefix))
        todo.write()
    else:
        todo.print_list(verbose=args.verbose, quiet=args.quiet, grep=args.grep)

